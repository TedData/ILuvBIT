import numpy as npfrom sklearn.datasets import make_friedman1from sklearn.ensemble import RandomForestRegressorfrom sklearn.model_selection import train_test_splitfrom sklearn.metrics import r2_score# create regression problemn_points = 1000 # pointsscores=[]x, y = make_friedman1(n_samples=n_points, n_features=15,noise=1.0, random_state=100)# split to train/test setx_train, x_test, y_train, y_test = \train_test_split(x, y, test_size=0.33, random_state=100)#Answer:for i in np.arange(1,15):    rf = RandomForestRegressor(n_estimators=1000, oob_score = True, max_features=i, random_state=100)    rf.fit(x_train,y_train)    yhatrf = rf.predict(x_test)    scores.append(r2_score(y_test, yhatrf))    print('m='+str(i)+'. r2='+str(scores[i-1]))print('The optimal parameter m is '+ str(scores.index(max(scores))+1) + ". R^2 score = "+ str(max(scores)))