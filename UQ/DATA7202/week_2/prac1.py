#Q1from sklearn.datasets import make_regressionfrom sklearn.datasets import make_classificationimport numpy as npimport pandas as pdx, y = make_regression(100,5)#print(x)#print('='*10)#print(y)data_regression = pd.DataFrame(x)data_regression['Y'] = pd.Series(y)#print(data_regression)xcl, ycl = make_classification(n_samples=7, n_features=4)#n_samples,n_features可以省略，n_features最小值为4#print(xcl)#print('='*10)#print(ycl)data_classification = pd.DataFrame(xcl)data_classification['ycl'] = pd.Series(ycl)#print(data_classification)#Q2from sklearn.model_selection import train_test_splitfrom sklearn import neighborsimport numpy as npimport pandas as pdimport matplotlib.pyplot as pltfrom sklearn.datasets import make_blobs, make_friedman1X, Y = make_friedman1(n_samples=10000, n_features=5, noise=0.5,random_state=10)X_train, X_tmp,y_train, y_tmp = train_test_split(X,Y,test_size=0.5,random_state=42)X_validate, X_test, y_validate, y_test = train_test_split(X_tmp, y_tmp, test_size=0.5,random_state=43)X_train = pd.read_csv('Xtrain.csv').values#.values代表值，不写代表矩阵y_train = pd.read_csv('Ytrain.csv').valuesX_validate = pd.read_csv('Xvalidate.csv').valuesy_validate = pd.read_csv('Yvalidate.csv').valuesX_test = pd.read_csv('Xtest.csv').valuesy_test = pd.read_csv('Ytest.csv').valuesdata_prac=pd.DataFrame(X_train)n_arr=list(range(1,51))scores=[]for k in n_arr:    knn = neighbors.KNeighborsRegressor(k)    knn.fit(X_train, y_train)    y_val_pred = knn.predict(X_validate)    #MSE = sum[(yi - estimate(yi))^2]    err = np.mean(np.power(y_val_pred - y_validate,2))    scores.append(err)    #print(k,'-',err)plt.plot(n_arr,scores)plt.ylabel('CV score (mean squared error)')plt.xlabel('k - # of neighbours')plt.title('MSE for Different K')kstar_val = min(scores)k_star = np.argmin(scores)#print('best k is', k_star+1,' Validation mse = ', kstar_val)knn = neighbors.KNeighborsRegressor(k_star+1)knn.fit(X_train, y_train)y_pred = knn.predict(X_test)err = np.mean(np.power(y_pred - y_test,2))print('Thegeneralization loss is :', err)